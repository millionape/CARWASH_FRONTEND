{"remainingRequest":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/babel-loader/lib/index.js!/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/Dashboard.vue","mtime":1606647543927},{"path":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606633812494},{"path":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/babel-loader/lib/index.js","mtime":1606633811405},{"path":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606633812494},{"path":"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js","mtime":1606633822865}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/kittaphornj/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport _ from \"lodash\"; // Charts\n\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport LineChart from \"@/components/Charts/LineChart\";\nimport Chart from \"chart.js\"; // Components\n\nimport BaseProgress from \"@/components/BaseProgress\";\nimport StatsCard from \"@/components/Cards/StatsCard\"; // Tables\n\nimport SocialTrafficTable from \"./Dashboard/SocialTrafficTable\";\nimport PageVisitsTable from \"./Dashboard/PageVisitsTable\";\nexport default {\n  components: {\n    LineChart: LineChart,\n    BaseProgress: BaseProgress,\n    StatsCard: StatsCard,\n    PageVisitsTable: PageVisitsTable,\n    SocialTrafficTable: SocialTrafficTable\n  },\n  data: function data() {\n    return {\n      SERVER_URL: \"http://0.0.0.0:3000\",\n      day_total: 0,\n      month_total: 0,\n      seven_day_total: 0,\n      barChartRender: false,\n      bigLineChart: {\n        activeIndex: 0,\n        chartData: {\n          datasets: [{\n            label: \"Performance\",\n            data: [0, 20, 10, 30, 15, 40, 20, 60, 60]\n          }],\n          labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n        },\n        extraOptions: chartConfigs.blueChartOptions\n      },\n      redBarChart: {\n        chartData: {\n          labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n          datasets: [{\n            label: \"Sales\",\n            data: [25, 20, 30, 22, 17, 29]\n          }]\n        },\n        extraOptions: chartConfigs.blueChartOptions\n      }\n    };\n  },\n  methods: {\n    initBigChart: function initBigChart(index) {\n      var chartData = {\n        datasets: [{\n          label: \"Performance\",\n          data: this.bigLineChart.allData[index]\n        }],\n        labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n      };\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    numberWithCommas: function numberWithCommas(x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    getTotalIncome_day: function () {\n      var _getTotalIncome_day = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var m, date;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                m = moment();\n                m.set({\n                  hour: 0,\n                  minute: 0,\n                  second: 0,\n                  millisecond: 0\n                });\n                date = moment(m).format(\"YYYY-MM-DD HH:mm:ss\");\n                _context.next = 5;\n                return axios.get(\"\".concat(this.SERVER_URL, \"/getTotalIncomeInDay?site=Rayong-1&sdate=\").concat(date)).then(function (response) {\n                  console.log(response);\n                  _this.day_total = 0;\n\n                  if (response.data.length > 0) {\n                    var _iterator = _createForOfIteratorHelper(response.data),\n                        _step;\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var transection = _step.value;\n                        _this.day_total += transection.insertedCredit;\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    console.log(\"this day: \", _this.day_total);\n\n                    var grouped = _.groupBy(response.data, function (item) {\n                      return item.deviceId;\n                    });\n\n                    _this.redBarChart.chartData.labels = [];\n                    _this.redBarChart.chartData.datasets = [];\n\n                    for (var key in grouped) {\n                      _this.redBarChart.chartData.labels.push(key);\n\n                      var tmp_counter = 0;\n                      console.log(\"push key :\", key);\n\n                      var _iterator2 = _createForOfIteratorHelper(grouped[key]),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var items = _step2.value;\n                          tmp_counter += items.insertedCredit; // console.log(\"add money :\",tmp_counter);\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      _this.redBarChart.chartData.datasets.push(tmp_counter);\n                    }\n\n                    console.log(\"GROUPED ITEMS :\", grouped);\n                  }\n                }).catch(function (e) {\n                  console.log(\"ERROR |\", e);\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTotalIncome_day() {\n        return _getTotalIncome_day.apply(this, arguments);\n      }\n\n      return getTotalIncome_day;\n    }(),\n    getTotalIncome_last_7_days: function () {\n      var _getTotalIncome_last_7_days = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var date;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // var m = moment();\n                // m = m.subtract(7, \"days\");\n                // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n                date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n                _context2.next = 3;\n                return axios.get(\"\".concat(this.SERVER_URL, \"/getTotalIncomeLast7Days?site=Rayong-1&date=\").concat(date)).then(function (response) {\n                  console.log(\"7days income :\", response);\n                  _this2.seven_day_total = 0;\n                  _this2.bigLineChart.chartData.labels = [];\n                  _this2.bigLineChart.chartData.datasets = [];\n\n                  if (response.data.length > 0) {\n                    var _iterator3 = _createForOfIteratorHelper(response.data),\n                        _step3;\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        var incomes = _step3.value;\n                        _this2.seven_day_total += incomes.money;\n                        var income_date = moment().date(incomes.day).format(\"YYYY-MM-DD\");\n\n                        _this2.bigLineChart.chartData.labels.push(income_date);\n\n                        _this2.bigLineChart.chartData.datasets.push(incomes.money);\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n                  }\n                }).catch(function (e) {\n                  console.log(\"ERROR |\", e);\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getTotalIncome_last_7_days() {\n        return _getTotalIncome_last_7_days.apply(this, arguments);\n      }\n\n      return getTotalIncome_last_7_days;\n    }(),\n    getTotalIncome_month: function () {\n      var _getTotalIncome_month = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var startOfMonth;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                startOfMonth = moment().startOf(\"month\").format(\"YYYY-MM-DD HH:mm:ss\");\n                _context3.next = 3;\n                return axios.get(\"\".concat(this.SERVER_URL, \"/getTotalIncomeInMonth?site=Rayong-1&sdate=\").concat(startOfMonth)).then(function (response) {\n                  console.log(response);\n                  _this3.month_total = 0;\n\n                  if (response.data.length > 0) {\n                    _this3.month_total = response.data[0].money;\n                    console.log(\"month_total : \", _this3.month_total);\n                  }\n                }).catch(function (e) {\n                  console.log(\"ERROR |\", e);\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getTotalIncome_month() {\n        return _getTotalIncome_month.apply(this, arguments);\n      }\n\n      return getTotalIncome_month;\n    }(),\n    initDevicesChart: function initDevicesChart() {\n      var ctx = document.getElementById(\"my-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"bar\",\n        scales: {\n          yAxes: [{\n            maxBarThickness: 2\n          }]\n        },\n        dataPointWidth: 20,\n        data: {\n          labels: this.redBarChart.chartData.labels,\n          datasets: [{\n            label: \"Income\",\n            data: this.redBarChart.chartData.datasets,\n            borderColor: \"#6E7EF5\",\n            backgroundColor: \"#E75F5B\",\n            fill: true\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    },\n    initTotalChart: function initTotalChart() {\n      var ctx = document.getElementById(\"big-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: this.bigLineChart.chartData.labels,\n          datasets: [{\n            label: \"Income\",\n            data: this.bigLineChart.chartData.datasets,\n            borderColor: \"#6E7EF5\",\n            fill: false\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.initBigChart(0);\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n      var loader;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              loader = this.$loading.show({\n                // Optional parameters\n                color: 'blue',\n                canCancel: true\n              });\n              _context4.next = 3;\n              return this.getTotalIncome_day();\n\n            case 3:\n              _context4.next = 5;\n              return this.getTotalIncome_month();\n\n            case 5:\n              _context4.next = 7;\n              return this.getTotalIncome_last_7_days();\n\n            case 7:\n              this.initTotalChart();\n              this.initDevicesChart();\n              loader.hide();\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }()\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,CAAA,MAAA,QAAA,C,CACA;;AACA,OAAA,KAAA,YAAA,MAAA,4BAAA;AACA,OAAA,SAAA,MAAA,+BAAA;AACA,OAAA,KAAA,MAAA,UAAA,C,CAEA;;AACA,OAAA,YAAA,MAAA,2BAAA;AACA,OAAA,SAAA,MAAA,8BAAA,C,CAEA;;AACA,OAAA,kBAAA;AACA,OAAA,eAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA,SADA;AAEA,IAAA,YAAA,EAAA,YAFA;AAGA,IAAA,SAAA,EAAA,SAHA;AAIA,IAAA,eAAA,EAAA,eAJA;AAKA,IAAA,kBAAA,EAAA;AALA,GADA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,qBADA;AAEA,MAAA,SAAA,EAAA,CAFA;AAGA,MAAA,WAAA,EAAA,CAHA;AAIA,MAAA,eAAA,EAAA,CAJA;AAKA,MAAA,cAAA,EAAA,KALA;AAMA,MAAA,YAAA,EAAA;AACA,QAAA,WAAA,EAAA,CADA;AAEA,QAAA,SAAA,EAAA;AACA,UAAA,QAAA,EAAA,CACA;AACA,YAAA,KAAA,EAAA,aADA;AAEA,YAAA,IAAA,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAFA,WADA,CADA;AAOA,UAAA,MAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA;AAPA,SAFA;AAWA,QAAA,YAAA,EAAA,YAAA,CAAA;AAXA,OANA;AAmBA,MAAA,WAAA,EAAA;AACA,QAAA,SAAA,EAAA;AACA,UAAA,MAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CADA;AAEA,UAAA,QAAA,EAAA,CACA;AACA,YAAA,KAAA,EAAA,OADA;AAEA,YAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;AAFA,WADA;AAFA,SADA;AAUA,QAAA,YAAA,EAAA,YAAA,CAAA;AAVA;AAnBA,KAAA;AAgCA,GAzCA;AA0CA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,KADA,EACA;AACA,UAAA,SAAA,GAAA;AACA,QAAA,QAAA,EAAA,CACA;AACA,UAAA,KAAA,EAAA,aADA;AAEA,UAAA,IAAA,EAAA,KAAA,YAAA,CAAA,OAAA,CAAA,KAAA;AAFA,SADA,CADA;AAOA,QAAA,MAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA;AAPA,OAAA;AASA,WAAA,YAAA,CAAA,SAAA,GAAA,SAAA;AACA,WAAA,YAAA,CAAA,WAAA,GAAA,KAAA;AACA,KAbA;AAcA,IAAA,gBAdA,4BAcA,CAdA,EAcA;AACA,aAAA,CAAA,CAAA,QAAA,GAAA,OAAA,CAAA,uBAAA,EAAA,GAAA,CAAA;AACA,KAhBA;AAiBA,IAAA,kBAjBA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,gBAAA,CAlBA,GAkBA,MAAA,EAlBA;AAmBA,gBAAA,CAAA,CAAA,GAAA,CAAA;AAAA,kBAAA,IAAA,EAAA,CAAA;AAAA,kBAAA,MAAA,EAAA,CAAA;AAAA,kBAAA,MAAA,EAAA,CAAA;AAAA,kBAAA,WAAA,EAAA;AAAA,iBAAA;AACA,gBAAA,IApBA,GAoBA,MAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,qBAAA,CApBA;AAAA;AAAA,uBAqBA,KAAA,CACA,GADA,WAEA,KAAA,UAFA,sDAEA,IAFA,GAIA,IAJA,CAIA,UAAA,QAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,kBAAA,KAAA,CAAA,SAAA,GAAA,CAAA;;AACA,sBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA,+DACA,QAAA,CAAA,IADA;AAAA;;AAAA;AACA,0EAAA;AAAA,4BAAA,WAAA;AACA,wBAAA,KAAA,CAAA,SAAA,IAAA,WAAA,CAAA,cAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;;AAIA,oBAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,KAAA,CAAA,SAAA;;AACA,wBAAA,OAAA,GAAA,CAAA,CAAA,OAAA,CAAA,QAAA,CAAA,IAAA,EAAA,UAAA,IAAA,EAAA;AACA,6BAAA,IAAA,CAAA,QAAA;AACA,qBAFA,CAAA;;AAGA,oBAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAA,EAAA;AACA,oBAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,EAAA;;AACA,yBAAA,IAAA,GAAA,IAAA,OAAA,EAAA;AACA,sBAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA;;AACA,0BAAA,WAAA,GAAA,CAAA;AACA,sBAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAAA,GAAA;;AAHA,kEAIA,OAAA,CAAA,GAAA,CAJA;AAAA;;AAAA;AAIA,+EAAA;AAAA,8BAAA,KAAA;AACA,0BAAA,WAAA,IAAA,KAAA,CAAA,cAAA,CADA,CAEA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;;AAQA,sBAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,WAAA;AACA;;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,OAAA;AACA;AACA,iBA7BA,EA8BA,KA9BA,CA8BA,UAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,CAAA;AACA,iBAhCA,CArBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuDA,IAAA,0BAvDA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwDA;AACA;AACA;AACA,gBAAA,IA3DA,GA2DA,MAAA,GAAA,MAAA,CAAA,qBAAA,CA3DA;AAAA;AAAA,uBA4DA,KAAA,CACA,GADA,WAEA,KAAA,UAFA,yDAEA,IAFA,GAIA,IAJA,CAIA,UAAA,QAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,QAAA;AACA,kBAAA,MAAA,CAAA,eAAA,GAAA,CAAA;AACA,kBAAA,MAAA,CAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,EAAA;AACA,kBAAA,MAAA,CAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,EAAA;;AACA,sBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA,gEACA,QAAA,CAAA,IADA;AAAA;;AAAA;AACA,6EAAA;AAAA,4BAAA,OAAA;AACA,wBAAA,MAAA,CAAA,eAAA,IAAA,OAAA,CAAA,KAAA;AACA,4BAAA,WAAA,GAAA,MAAA,GAAA,IAAA,CAAA,OAAA,CAAA,GAAA,EAAA,MAAA,CAAA,YAAA,CAAA;;AACA,wBAAA,MAAA,CAAA,YAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,WAAA;;AACA,wBAAA,MAAA,CAAA,YAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,KAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA,iBAjBA,EAkBA,KAlBA,CAkBA,UAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,CAAA;AACA,iBApBA,CA5DA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkFA,IAAA,oBAlFA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmFA,gBAAA,YAnFA,GAmFA,MAAA,GACA,OADA,CACA,OADA,EAEA,MAFA,CAEA,qBAFA,CAnFA;AAAA;AAAA,uBAsFA,KAAA,CACA,GADA,WAEA,KAAA,UAFA,wDAEA,YAFA,GAIA,IAJA,CAIA,UAAA,QAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AACA,kBAAA,MAAA,CAAA,WAAA,GAAA,CAAA;;AACA,sBAAA,QAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,oBAAA,MAAA,CAAA,WAAA,GAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,EAAA,MAAA,CAAA,WAAA;AACA;AACA,iBAXA,EAYA,KAZA,CAYA,UAAA,CAAA,EAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,CAAA;AACA,iBAdA,CAtFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsGA,IAAA,gBAtGA,8BAsGA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,cAAA,CAAA,UAAA,CAAA;AACA,UAAA,OAAA,GAAA,IAAA,KAAA,CAAA,GAAA,EAAA;AACA,QAAA,IAAA,EAAA,KADA;AAEA,QAAA,MAAA,EAAA;AACA,UAAA,KAAA,EAAA,CACA;AACA,YAAA,eAAA,EAAA;AADA,WADA;AADA,SAFA;AASA,QAAA,cAAA,EAAA,EATA;AAUA,QAAA,IAAA,EAAA;AACA,UAAA,MAAA,EAAA,KAAA,WAAA,CAAA,SAAA,CAAA,MADA;AAEA,UAAA,QAAA,EAAA,CACA;AACA,YAAA,KAAA,EAAA,QADA;AAEA,YAAA,IAAA,EAAA,KAAA,WAAA,CAAA,SAAA,CAAA,QAFA;AAGA,YAAA,WAAA,EAAA,SAHA;AAIA,YAAA,eAAA,EAAA,SAJA;AAKA,YAAA,IAAA,EAAA;AALA,WADA;AAFA,SAVA;AAsBA,QAAA,OAAA,EAAA;AACA,UAAA,UAAA,EAAA;AADA;AAtBA,OAAA,CAAA;AA0BA,KAlIA;AAmIA,IAAA,cAnIA,4BAmIA;AACA,UAAA,GAAA,GAAA,QAAA,CAAA,cAAA,CAAA,WAAA,CAAA;AACA,UAAA,OAAA,GAAA,IAAA,KAAA,CAAA,GAAA,EAAA;AACA,QAAA,IAAA,EAAA,MADA;AAEA,QAAA,IAAA,EAAA;AACA,UAAA,MAAA,EAAA,KAAA,YAAA,CAAA,SAAA,CAAA,MADA;AAEA,UAAA,QAAA,EAAA,CACA;AACA,YAAA,KAAA,EAAA,QADA;AAEA,YAAA,IAAA,EAAA,KAAA,YAAA,CAAA,SAAA,CAAA,QAFA;AAGA,YAAA,WAAA,EAAA,SAHA;AAIA,YAAA,IAAA,EAAA;AAJA,WADA;AAFA,SAFA;AAaA,QAAA,OAAA,EAAA;AACA,UAAA,UAAA,EAAA;AADA;AAbA,OAAA,CAAA;AAiBA;AAtJA,GA1CA;AAkMA,EAAA,OAlMA,qBAkMA;AACA,SAAA,YAAA,CAAA,CAAA;AACA,GApMA;AAqMA,EAAA,OArMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsMA,cAAA,MAtMA,GAsMA,KAAA,QAAA,CAAA,IAAA,CAAA;AACA;AACA,gBAAA,KAAA,EAAA,MAFA;AAGA,gBAAA,SAAA,EAAA;AAHA,eAAA,CAtMA;AAAA;AAAA,qBA2MA,KAAA,kBAAA,EA3MA;;AAAA;AAAA;AAAA,qBA4MA,KAAA,oBAAA,EA5MA;;AAAA;AAAA;AAAA,qBA6MA,KAAA,0BAAA,EA7MA;;AAAA;AA8MA,mBAAA,cAAA;AACA,mBAAA,gBAAA;AACA,cAAA,MAAA,CAAA,IAAA;;AAhNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAA","sourcesContent":["<template>\n  <div>\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\">\n      <!-- Card stats -->\n      <b-row>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in this year\"\n            type=\"gradient-info\"\n            sub-title=\"49,65%\"\n            icon=\"ni ni-chart-bar-32\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">54.8%</span>\n              <span class=\"text-nowrap\">Since last month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in this month\"\n            type=\"gradient-red\"\n            :sub-title=\"String(numberWithCommas(month_total)) + ' BTH'\"\n            icon=\"ni ni-active-40\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">3.48%</span>\n              <span class=\"text-nowrap\">Total income in this month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in last 7 days\"\n            type=\"gradient-orange\"\n            :sub-title=\"String(numberWithCommas(seven_day_total)) + ' BTH'\"\n            icon=\"ni ni-chart-pie-35\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">12.18%</span>\n              <span class=\"text-nowrap\">Total income in last 7 days</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Current income in this day\"\n            type=\"gradient-green\"\n            :sub-title=\"String(numberWithCommas(day_total)) + ' BTH'\"\n            icon=\"ni ni-money-coins\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-danger mr-2\">5.72%</span>\n              <span class=\"text-nowrap\">Since last month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n      </b-row>\n    </base-header>\n\n    <!--Charts-->\n    <b-container fluid class=\"mt--7\">\n      <b-row>\n        <b-col xl=\"12\" class=\"mb-5 mb-xl-0\">\n          <card header-classes=\"bg-transparent\" class=\"h-100 graphCard\">\n            <b-row align-v=\"center\" slot=\"header\">\n              <b-col>\n                <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Income</h6>\n                <h5 class=\"h3 mb-0\">Current income by devices</h5>\n              </b-col>\n            </b-row>\n\n            <canvas style=\"height:100%; width:100%\" id=\"my-chart\"></canvas>\n          </card>\n        </b-col>\n        <br/>\n        <br/>\n        <b-col xl=\"12\" class=\"mb-5 mt-5 mb-xl-0\">\n          <card header-classes=\"bg-transparent\" class=\"graphCard\">\n            <b-row align-v=\"center\" slot=\"header\">\n              <b-col>\n                <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Income</h6>\n                <h5 class=\"h3 mb-0\">Income in last 7 days</h5>\n              </b-col>\n              <b-col>\n                <b-nav class=\"nav-pills justify-content-end\">\n                  <b-nav-item\n                    class=\"mr-2 mr-md-0\"\n                    link-classes=\"py-2 px-3\"\n                    @click.prevent=\"initBigChart(0)\"\n                  >\n                    <span class=\"d-none d-md-block\">Month</span>\n                    <span class=\"d-md-none\">M</span>\n                  </b-nav-item>\n                  <b-nav-item\n                    link-classes=\"py-2 px-3\"\n                    @click.prevent=\"initBigChart(1)\"\n                  >\n                    <span class=\"d-none d-md-block\">Week</span>\n                    <span class=\"d-md-none\">W</span>\n                  </b-nav-item>\n                </b-nav>\n              </b-col>\n            </b-row>\n            <canvas style=\"height:100%; width:100%\" id=\"big-chart\"></canvas>\n          </card>\n        </b-col>\n      </b-row>\n      <!-- End charts-->\n\n      <!--Tables-->\n      <b-row class=\"mt-5\">\n        <b-col xl=\"12\" class=\"mb-5 mb-xl-0\">\n          <page-visits-table></page-visits-table>\n        </b-col>\n        <!-- <b-col xl=\"4\" class=\"mb-5 mb-xl-0\">\n          <social-traffic-table></social-traffic-table>\n        </b-col> -->\n      </b-row>\n      <!--End tables-->\n    </b-container>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n// Charts\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport LineChart from \"@/components/Charts/LineChart\";\nimport Chart from \"chart.js\";\n\n// Components\nimport BaseProgress from \"@/components/BaseProgress\";\nimport StatsCard from \"@/components/Cards/StatsCard\";\n\n// Tables\nimport SocialTrafficTable from \"./Dashboard/SocialTrafficTable\";\nimport PageVisitsTable from \"./Dashboard/PageVisitsTable\";\n\nexport default {\n  components: {\n    LineChart,\n    BaseProgress,\n    StatsCard,\n    PageVisitsTable,\n    SocialTrafficTable\n  },\n  data() {\n    return {\n      SERVER_URL: \"http://0.0.0.0:3000\",\n      day_total: 0,\n      month_total: 0,\n      seven_day_total: 0,\n      barChartRender: false,\n      bigLineChart: {\n        activeIndex: 0,\n        chartData: {\n          datasets: [\n            {\n              label: \"Performance\",\n              data: [0, 20, 10, 30, 15, 40, 20, 60, 60]\n            }\n          ],\n          labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n        },\n        extraOptions: chartConfigs.blueChartOptions\n      },\n      redBarChart: {\n        chartData: {\n          labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n          datasets: [\n            {\n              label: \"Sales\",\n              data: [25, 20, 30, 22, 17, 29]\n            }\n          ]\n        },\n        extraOptions: chartConfigs.blueChartOptions\n      }\n    };\n  },\n  methods: {\n    initBigChart(index) {\n      let chartData = {\n        datasets: [\n          {\n            label: \"Performance\",\n            data: this.bigLineChart.allData[index]\n          }\n        ],\n        labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n      };\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    numberWithCommas(x) {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    async getTotalIncome_day() {\n      var m = moment();\n      m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment(m).format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInDay?site=Rayong-1&sdate=${date}`\n        )\n        .then(response => {\n          console.log(response);\n          this.day_total = 0;\n          if (response.data.length > 0) {\n            for (let transection of response.data) {\n              this.day_total += transection.insertedCredit;\n            }\n            console.log(\"this day: \", this.day_total);\n            var grouped = _.groupBy(response.data, function(item) {\n              return item.deviceId;\n            });\n            this.redBarChart.chartData.labels = [];\n            this.redBarChart.chartData.datasets = [];\n            for (let key in grouped) {\n              this.redBarChart.chartData.labels.push(key);\n              let tmp_counter = 0;\n              console.log(\"push key :\", key);\n              for (let items of grouped[key]) {\n                tmp_counter += items.insertedCredit;\n                // console.log(\"add money :\",tmp_counter);\n              }\n              this.redBarChart.chartData.datasets.push(tmp_counter);\n            }\n            console.log(\"GROUPED ITEMS :\", grouped);\n          }\n        })\n        .catch(e => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_last_7_days() {\n      // var m = moment();\n      // m = m.subtract(7, \"days\");\n      // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeLast7Days?site=Rayong-1&date=${date}`\n        )\n        .then(response => {\n          console.log(\"7days income :\",response);\n          this.seven_day_total = 0;\n          this.bigLineChart.chartData.labels = [];\n          this.bigLineChart.chartData.datasets = [];\n          if (response.data.length > 0) {\n            for (let incomes of response.data) {\n              this.seven_day_total += incomes.money;\n              let income_date = moment().date(incomes.day).format(\"YYYY-MM-DD\");\n              this.bigLineChart.chartData.labels.push(income_date);\n              this.bigLineChart.chartData.datasets.push(incomes.money);\n            }\n          }\n        })\n        .catch(e => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_month() {\n      const startOfMonth = moment()\n        .startOf(\"month\")\n        .format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInMonth?site=Rayong-1&sdate=${startOfMonth}`\n        )\n        .then(response => {\n          console.log(response);\n          this.month_total = 0;\n          if (response.data.length > 0) {\n            this.month_total = response.data[0].money;\n            console.log(\"month_total : \", this.month_total);\n          }\n        })\n        .catch(e => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    initDevicesChart() {\n      var ctx = document.getElementById(\"my-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"bar\",\n        scales: {\n          yAxes: [\n            {\n              maxBarThickness: 2\n            }\n          ]\n        },\n        dataPointWidth: 20,\n        data: {\n          labels: this.redBarChart.chartData.labels,\n          datasets: [\n            {\n              label: \"Income\",\n              data: this.redBarChart.chartData.datasets,\n              borderColor: \"#6E7EF5\",\n              backgroundColor: \"#E75F5B\",\n              fill: true\n            }\n          ]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    },\n    initTotalChart() {\n      var ctx = document.getElementById(\"big-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: this.bigLineChart.chartData.labels,\n          datasets: [\n            {\n              label: \"Income\",\n              data: this.bigLineChart.chartData.datasets,\n              borderColor: \"#6E7EF5\",\n              fill: false\n            }\n          ]\n        },\n        options: {\n          responsive: true\n        }\n      });\n    }\n  },\n  mounted() {\n    this.initBigChart(0);\n  },\n  async created() {\n    let loader = this.$loading.show({\n      // Optional parameters\n      color: 'blue',\n      canCancel: true,\n    });\n    await this.getTotalIncome_day();\n    await this.getTotalIncome_month();\n    await this.getTotalIncome_last_7_days();\n    this.initTotalChart();\n    this.initDevicesChart();\n    loader.hide();\n  }\n};\n</script>\n<style lang=\"scss\">\n.el-table .cell {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n.graphCard {\n  height: 600px !important;\n}\n.statusCard {\n  height: 8rem !important;\n}\n</style>\n"],"sourceRoot":"src/views"}]}