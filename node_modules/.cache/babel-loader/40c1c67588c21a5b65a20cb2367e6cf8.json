{"remainingRequest":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/babel-loader/lib/index.js!/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/DeviceInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/DeviceInfo.vue","mtime":1607343894342},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606987769885},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/babel-loader/lib/index.js","mtime":1606987769374},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606987769885},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js","mtime":1606987774990}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { SERVER_PARAMS } from \"../environment/environment\";\nexport default {\n  name: \"icons\",\n  props: {\n    deviceId: String\n  },\n  data: function data() {\n    return {\n      deviceMode: null,\n      deviceCurrentCredit: null,\n      deviceLastInsertCredit: null,\n      deviceLastInsertDate: null,\n      deviceUpdatedDate: null,\n      deviceList: [],\n      polling: null,\n      SERVER_URL: SERVER_PARAMS.URL,\n      columns: [{\n        label: \"Updated Date\",\n        field: \"updatedDate\"\n      }, {\n        label: \"Device Id\",\n        field: \"deviceId\"\n      }, {\n        label: \"Mode\",\n        field: \"onMode\"\n      }, {\n        label: \"Credit\",\n        field: \"currentCredit\"\n      }, {\n        label: \"Inserted Credit\",\n        field: \"insertedCredit\"\n      }],\n      rows: []\n    };\n  },\n  methods: {\n    pollData: function pollData() {\n      var _this = this;\n\n      this.polling = setInterval(function () {\n        _this.getCurrentStates();\n      }, 2000);\n    },\n    getCurrentStates: function () {\n      var _getCurrentStates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"\".concat(this.SERVER_URL, \"/getDeviceCurrentStatus?deviceId=\").concat(this.deviceId)).then(function (response) {\n                  console.log(\"DEVICES info \", response);\n                  var data = response.data[0];\n                  _this2.deviceMode = data.onMode;\n                  _this2.deviceCurrentCredit = data.currentCredit;\n                  _this2.deviceLastInsertCredit = data.lastInsertCredit;\n                  _this2.deviceLastInsertDate = data.lastInsertDate;\n                  _this2.deviceUpdatedDate = data.updatedDate;\n                }).catch(function (e) {\n                  console.log(\"ERROR |\", e);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCurrentStates() {\n        return _getCurrentStates.apply(this, arguments);\n      }\n\n      return getCurrentStates;\n    }(),\n    getHistory: function () {\n      var _getHistory = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(deviceId) {\n        var _this3 = this;\n\n        var loader, sdate, edate;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                loader = this.$loading.show({\n                  // Optional parameters\n                  color: \"blue\",\n                  canCancel: true\n                });\n                sdate = moment().subtract(7, \"days\").format(\"YYYY-MM-DD HH:mm:ss\");\n                edate = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n                _context2.next = 5;\n                return axios.get(\"\".concat(this.SERVER_URL, \"/getTransectionByDeviceId?deviceId=\").concat(deviceId, \"&sdate=\").concat(sdate, \"&edate=\").concat(edate, \"&limit=2000\")).then(function (response) {\n                  console.log(\"HISTORY lIST \", response);\n                  _this3.rows = response.data;\n                  loader.hide();\n                }).catch(function (e) {\n                  console.log(\"ERROR |\", e);\n                  loader.hide();\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getHistory(_x) {\n        return _getHistory.apply(this, arguments);\n      }\n\n      return getHistory;\n    }()\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.polling);\n  },\n  created: function created() {\n    this.getHistory(this.deviceId);\n    this.pollData();\n  }\n};",{"version":3,"sources":["DeviceInfo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"mt-3\">\n    <card header-classes=\"bg-transparent mt-3\">\n      <h3 class=\"mb-0\">Current state</h3>\n      <b-row class=\"mt-3\">\n        <b-col>\n          <stats-card\n            title=\"Current Credit\"\n            type=\"gradient-info\"\n            :sub-title=\"deviceCurrentCredit\"\n          >\n          </stats-card>\n        </b-col>\n        <b-col>\n          <stats-card\n            title=\"Current Mode\"\n            type=\"gradient-info\"\n            :sub-title=\"deviceMode\"\n          >\n          </stats-card>\n        </b-col>\n        <b-col>\n          <stats-card\n            title=\"Last Inserted Credit\"\n            type=\"gradient-info\"\n            :sub-title=\"deviceLastInsertCredit\"\n          >\n          </stats-card>\n        </b-col>\n        <b-col>\n          <stats-card\n            title=\"Last Inserted Date\"\n            type=\"gradient-info\"\n            :sub-title=\"deviceLastInsertDate\"\n          >\n          </stats-card>\n        </b-col>\n        <b-col>\n          <stats-card\n            title=\"Last Update\"\n            type=\"gradient-info\"\n            :sub-title=\"deviceUpdatedDate\"\n          >\n          </stats-card>\n        </b-col>\n      </b-row>\n    </card>\n    <br />\n    <card header-classes=\"bg-transparent\">\n      <h3 slot=\"header\" class=\"mb-0\">Event List</h3>\n      <vue-good-table\n        :columns=\"columns\"\n        :rows=\"rows\"\n        :pagination-options=\"{\n          enabled: true,\n          mode: 'pages',\n          perPage: 10,\n          perPageDropdown: [50, 100, 300, 1000],\n        }\"\n      />\n    </card>\n  </div>\n</template>\n<script>\nimport Vue from \"vue\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { SERVER_PARAMS } from \"../environment/environment\";\n\nexport default {\n  name: \"icons\",\n  props: {\n    deviceId: String,\n  },\n  data() {\n    return {\n      deviceMode: null,\n      deviceCurrentCredit: null,\n      deviceLastInsertCredit: null,\n      deviceLastInsertDate: null,\n      deviceUpdatedDate: null,\n      deviceList: [],\n      polling: null,\n      SERVER_URL: SERVER_PARAMS.URL,\n      columns: [\n        {\n          label: \"Updated Date\",\n          field: \"updatedDate\",\n        },\n        {\n          label: \"Device Id\",\n          field: \"deviceId\",\n        },\n        {\n          label: \"Mode\",\n          field: \"onMode\",\n        },\n        {\n          label: \"Credit\",\n          field: \"currentCredit\",\n        },\n        {\n          label: \"Inserted Credit\",\n          field: \"insertedCredit\",\n        },\n      ],\n      rows: [],\n    };\n  },\n  methods: {\n    pollData() {\n      this.polling = setInterval(() => {\n        this.getCurrentStates();\n      }, 2000);\n    },\n    async getCurrentStates() {\n      await axios\n        .get(`${this.SERVER_URL}/getDeviceCurrentStatus?deviceId=${this.deviceId}`)\n        .then((response) => {\n          console.log(\"DEVICES info \", response);\n          let data = response.data[0];\n          this.deviceMode = data.onMode;\n          this.deviceCurrentCredit = data.currentCredit;\n          this.deviceLastInsertCredit = data.lastInsertCredit;\n          this.deviceLastInsertDate = data.lastInsertDate;\n          this.deviceUpdatedDate = data.updatedDate;\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getHistory(deviceId) {\n      let loader = this.$loading.show({\n        // Optional parameters\n        color: \"blue\",\n        canCancel: true,\n      });\n      var sdate = moment()\n        .subtract(7, \"days\")\n        .format(\"YYYY-MM-DD HH:mm:ss\");\n      var edate = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTransectionByDeviceId?deviceId=${deviceId}&sdate=${sdate}&edate=${edate}&limit=2000`\n        )\n        .then((response) => {\n          console.log(\"HISTORY lIST \", response);\n          this.rows = response.data;\n          loader.hide();\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n          loader.hide();\n        });\n    },\n  },\n   beforeDestroy() {\n    clearInterval(this.polling);\n  },\n  \n  created() {\n    this.getHistory(this.deviceId);\n    this.pollData();\n  },\n};\n</script>\n<style></style>\n"],"sourceRoot":"src/views"}]}