{"remainingRequest":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/src/views/Dashboard.vue","mtime":1607351985749},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606987769885},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/babel-loader/lib/index.js","mtime":1606987769374},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/cache-loader/dist/cjs.js","mtime":1606987769885},{"path":"/Users/admin/Desktop/CARWASH_PROJECT/CARWASH_FRONTEND/node_modules/vue-loader/lib/index.js","mtime":1606987774990}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n// Charts\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport LineChart from \"@/components/Charts/LineChart\";\nimport Chart from \"chart.js\";\n\n// Components\nimport BaseProgress from \"@/components/BaseProgress\";\nimport StatsCard from \"@/components/Cards/StatsCard\";\n\n// Tables\nimport SocialTrafficTable from \"./Dashboard/SocialTrafficTable\";\nimport PageVisitsTable from \"./Dashboard/PageVisitsTable\";\nimport { SERVER_PARAMS } from \"../environment/environment\";\n\nexport default {\n  components: {\n    LineChart,\n    BaseProgress,\n    StatsCard,\n    PageVisitsTable,\n    SocialTrafficTable,\n  },\n  data() {\n    return {\n      SERVER_URL: SERVER_PARAMS.URL,\n      // SERVER_URL: \"http://0.0.0.0:3000\",\n      day_total: 0,\n      month_total: 0,\n      seven_day_total: 0,\n      year_total: 0,\n      chartTypeSelected: \"month\",\n      myChart: null,\n      barChartRender: false,\n      bigLineChart: {\n        activeIndex: 0,\n        chartData: {\n          datasets: [\n            {\n              label: \"Performance\",\n              data: [0, 20, 10, 30, 15, 40, 20, 60, 60],\n            },\n          ],\n          labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        },\n        extraOptions: chartConfigs.blueChartOptions,\n      },\n      redBarChart: {\n        chartData: {\n          labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n          datasets: [\n            {\n              label: \"Sales\",\n              data: [25, 20, 30, 22, 17, 29],\n            },\n          ],\n        },\n        extraOptions: chartConfigs.blueChartOptions,\n      },\n      monthChart: {\n        labels: [],\n        data: [],\n      },\n      yearChart: {\n        labels: [],\n        data: [],\n      },\n    };\n  },\n  methods: {\n    initBigChart(index) {\n      let chartData = {\n        datasets: [\n          {\n            label: \"Performance\",\n            data: this.bigLineChart.allData[index],\n          },\n        ],\n        labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      };\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    numberWithCommas(x) {\n      if (x === null || x === undefined) {\n        x = 0;\n      }\n      x = String(x);\n      return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    async getTotalIncome_day() {\n      var m = moment();\n      m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment(m).format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInDay?site=Rayong-1&sdate=${date}`\n        )\n        .then((response) => {\n          console.log(response);\n          this.day_total = 0;\n          if (response.data.length > 0) {\n            for (let transection of response.data) {\n              this.day_total += transection.insertedCredit;\n            }\n            console.log(\"this day: \", this.day_total);\n            var grouped = _.groupBy(response.data, function(item) {\n              return item.deviceId;\n            });\n            this.redBarChart.chartData.labels = [];\n            this.redBarChart.chartData.datasets = [];\n            for (let key in grouped) {\n              this.redBarChart.chartData.labels.push(key);\n              let tmp_counter = 0;\n              console.log(\"push key :\", key);\n              for (let items of grouped[key]) {\n                tmp_counter += items.insertedCredit;\n                // console.log(\"add money :\",tmp_counter);\n              }\n              this.redBarChart.chartData.datasets.push(tmp_counter);\n            }\n            console.log(\"GROUPED ITEMS :\", grouped);\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_last_7_days() {\n      // var m = moment();\n      // m = m.subtract(7, \"days\");\n      // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeLast7Days?site=Rayong-1&date=${date}`\n        )\n        .then((response) => {\n          console.log(\"7days income :\", response);\n          this.seven_day_total = 0;\n          this.monthChart.data = [];\n          this.bigLineChart.chartData.datasets = [];\n          if (response.data.length > 0) {\n            for (let incomes of response.data) {\n              this.seven_day_total += incomes.money;\n              let income_date = moment()\n                .date(incomes.day)\n                .format(\"YYYY-MM-DD\");\n              this.monthChart.labels.push(income_date);\n              this.monthChart.data.push(incomes.money);\n              // this.bigLineChart.chartData.labels.push(income_date);\n              // this.bigLineChart.chartData.datasets.push(incomes.money);\n            }\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_year() {\n      // var m = moment();\n      // m = m.subtract(7, \"days\");\n      // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeThisYear?site=Rayong-1&date=${date}`\n        )\n        .then((response) => {\n          console.log(\"7days income :\", response);\n          this.year_total = 0;\n          // this.bigLineChart.chartData.labels = [];\n          // this.bigLineChart.chartData.datasets = [];\n          this.yearChart.labels = [];\n          this.yearChart.data = [];\n          if (response.data.length > 0) {\n            for (let incomes of response.data) {\n              this.year_total += incomes.money;\n              console.log(\"year total: \", this.year_total);\n              let income_date = moment(date)\n                .set(\"month\", incomes.month - 1)\n                .format(\"YYYY-MM\");\n              // this.bigLineChart.chartData.labels.push(income_date);\n              // this.bigLineChart.chartData.datasets.push(incomes.money);\n              this.yearChart.data.push(incomes.money);\n              this.yearChart.labels.push(income_date);\n            }\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_month() {\n      const startOfMonth = moment()\n        .startOf(\"month\")\n        .format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInMonth?site=Rayong-1&sdate=${startOfMonth}`\n        )\n        .then((response) => {\n          console.log(response);\n          this.month_total = 0;\n          if (response.data.length > 0) {\n            this.month_total = response.data[0].money;\n            console.log(\"month_total : \", this.month_total);\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    initDevicesChart() {\n      var ctx = document.getElementById(\"my-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"bar\",\n        scales: {\n          yAxes: [\n            {\n              maxBarThickness: 2,\n            },\n          ],\n        },\n        dataPointWidth: 20,\n        data: {\n          labels: this.redBarChart.chartData.labels,\n          datasets: [\n            {\n              label: \"Income\",\n              data: this.redBarChart.chartData.datasets,\n              borderColor: \"#6E7EF5\",\n              backgroundColor: \"#E75F5B\",\n              fill: true,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n        },\n      });\n      myChart.update();\n    },\n    initTotalChart() {\n      document.getElementById(\"chartContainer\").innerHTML = \"&nbsp;\";\n      document.getElementById(\"chartContainer\").innerHTML = '<canvas style=\"height:100% !important; width:100% !important\" id=\"big-chart\"></canvas>';\n      var ctx = document.getElementById(\"big-chart\");\n      if (this.myChart !== null) {\n        this.myChart.destroy();\n      }\n      if (ctx !== null) {\n        var myChart = new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.monthChart.labels,\n            datasets: [\n              {\n                label: \"Income\",\n                data: this.monthChart.data,\n                borderColor: \"#6E7EF5\",\n                backgroundColor: \"#6E7EF5\",\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n          },\n        });\n        this.myChart = myChart;\n      }\n    },\n    initTotalChart2() {\n      document.getElementById(\"chartContainer\").innerHTML = \"&nbsp;\";\n      document.getElementById(\"chartContainer\").innerHTML = '<canvas style=\"height:100% !important; width:100% !important\" id=\"big-chart\"></canvas>';\n      var ctx = document.getElementById(\"big-chart\");\n      if (this.myChart !== null) {\n        this.myChart.destroy();\n      }\n      if (ctx !== null) {\n        var myChart = new Chart(ctx, {\n          type: \"bar\",\n          data: {\n            labels: this.yearChart.labels,\n            datasets: [\n              {\n                label: \"Income\",\n                data: this.yearChart.data,\n                borderColor: \"#6E7EF5\",\n                backgroundColor: \"#6E7EF5\",\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n          },\n        });\n        this.myChart = myChart;\n      }\n    },\n  },\n  mounted() {\n    this.initBigChart(0);\n  },\n  async created() {\n    let loader = this.$loading.show({\n      // Optional parameters\n      color: \"blue\",\n      canCancel: true,\n    });\n    await this.getTotalIncome_day();\n    await this.getTotalIncome_month();\n    await this.getTotalIncome_last_7_days();\n    await this.getTotalIncome_year();\n    this.initTotalChart();\n    this.initDevicesChart();\n    loader.hide();\n  },\n};\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Dashboard.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <base-header class=\"pb-6 pb-8 pt-5 pt-md-8 bg-gradient-success\">\n      <!-- Card stats -->\n      <b-row>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in this year\"\n            type=\"gradient-info\"\n            :sub-title=\"String(numberWithCommas(year_total)) + ' BTH'\"\n            icon=\"ni ni-chart-bar-32\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">54.8%</span>\n              <span class=\"text-nowrap\">Since last month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in this month\"\n            type=\"gradient-red\"\n            :sub-title=\"String(numberWithCommas(month_total)) + ' BTH'\"\n            icon=\"ni ni-active-40\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">3.48%</span>\n              <span class=\"text-nowrap\">Total income in this month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Total income in last 7 days\"\n            type=\"gradient-orange\"\n            :sub-title=\"String(numberWithCommas(seven_day_total)) + ' BTH'\"\n            icon=\"ni ni-chart-pie-35\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-success mr-2\">12.18%</span>\n              <span class=\"text-nowrap\">Total income in last 7 days</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n        <b-col xl=\"3\" md=\"6\">\n          <stats-card\n            title=\"Current income in this day\"\n            type=\"gradient-green\"\n            :sub-title=\"String(numberWithCommas(day_total)) + ' BTH'\"\n            icon=\"ni ni-money-coins\"\n            class=\"mb-4 statusCard\"\n          >\n            <template slot=\"footer\">\n              <!-- <span class=\"text-danger mr-2\">5.72%</span>\n              <span class=\"text-nowrap\">Since last month</span> -->\n            </template>\n          </stats-card>\n        </b-col>\n      </b-row>\n    </base-header>\n\n    <!--Charts-->\n    <b-container fluid class=\"mt--7\">\n      <b-row>\n        <b-col xl=\"12\" class=\"mb-5 mb-xl-0\">\n          <card header-classes=\"bg-transparent\" class=\"h-100 graphCard\">\n            <b-row align-v=\"center\" slot=\"header\">\n              <b-col>\n                <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Income</h6>\n                <h5 class=\"h3 mb-0\">Current income by devices</h5>\n              </b-col>\n            </b-row>\n\n            <canvas style=\"height:100%; width:100%\" id=\"my-chart\"></canvas>\n          </card>\n        </b-col>\n        <br />\n        <br />\n        <b-col xl=\"12\" class=\"mb-5 mt-5 mb-xl-0\">\n          <card header-classes=\"bg-transparent\" class=\"graphCard\">\n            <b-row align-v=\"center\" slot=\"header\">\n              <b-col>\n                <h6 class=\"text-uppercase text-muted ls-1 mb-1\">Income</h6>\n                <h5 class=\"h3 mb-0\">Total Income Graph</h5>\n              </b-col>\n              <b-col>\n                <b-nav class=\"nav-pills justify-content-end\">\n                  <b-nav-item\n                    class=\"mr-2 mr-md-0\"\n                    link-classes=\"py-2 px-3\"\n                    @click.prevent=\"initTotalChart()\"\n                  >\n                    <span class=\"d-none d-md-block\">Week</span>\n                    <span class=\"d-md-none\">W</span>\n                  </b-nav-item>\n                  <b-nav-item\n                    link-classes=\"py-2 px-3\"\n                    @click.prevent=\"initTotalChart2()\"\n                  >\n                    <span class=\"d-none d-md-block\">Month</span>\n                    <span class=\"d-md-none\">Y</span>\n                  </b-nav-item>\n                </b-nav>\n              </b-col>\n            </b-row>\n            <div style=\"height:100%; width:100%\" id=\"chartContainer\">\n              <canvas\n                style=\"height:100% !important; width:100% !important\"\n                id=\"big-chart\"\n              ></canvas>\n            </div>\n          </card>\n        </b-col>\n      </b-row>\n      <!-- End charts-->\n\n      <!--Tables-->\n      <b-row class=\"mt-5\">\n        <b-col xl=\"12\" class=\"mb-5 mb-xl-0\">\n          <page-visits-table></page-visits-table>\n        </b-col>\n        <!-- <b-col xl=\"4\" class=\"mb-5 mb-xl-0\">\n          <social-traffic-table></social-traffic-table>\n        </b-col> -->\n      </b-row>\n      <!--End tables-->\n    </b-container>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n// Charts\nimport * as chartConfigs from \"@/components/Charts/config\";\nimport LineChart from \"@/components/Charts/LineChart\";\nimport Chart from \"chart.js\";\n\n// Components\nimport BaseProgress from \"@/components/BaseProgress\";\nimport StatsCard from \"@/components/Cards/StatsCard\";\n\n// Tables\nimport SocialTrafficTable from \"./Dashboard/SocialTrafficTable\";\nimport PageVisitsTable from \"./Dashboard/PageVisitsTable\";\nimport { SERVER_PARAMS } from \"../environment/environment\";\n\nexport default {\n  components: {\n    LineChart,\n    BaseProgress,\n    StatsCard,\n    PageVisitsTable,\n    SocialTrafficTable,\n  },\n  data() {\n    return {\n      SERVER_URL: SERVER_PARAMS.URL,\n      // SERVER_URL: \"http://0.0.0.0:3000\",\n      day_total: 0,\n      month_total: 0,\n      seven_day_total: 0,\n      year_total: 0,\n      chartTypeSelected: \"month\",\n      myChart: null,\n      barChartRender: false,\n      bigLineChart: {\n        activeIndex: 0,\n        chartData: {\n          datasets: [\n            {\n              label: \"Performance\",\n              data: [0, 20, 10, 30, 15, 40, 20, 60, 60],\n            },\n          ],\n          labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n        },\n        extraOptions: chartConfigs.blueChartOptions,\n      },\n      redBarChart: {\n        chartData: {\n          labels: [\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n          datasets: [\n            {\n              label: \"Sales\",\n              data: [25, 20, 30, 22, 17, 29],\n            },\n          ],\n        },\n        extraOptions: chartConfigs.blueChartOptions,\n      },\n      monthChart: {\n        labels: [],\n        data: [],\n      },\n      yearChart: {\n        labels: [],\n        data: [],\n      },\n    };\n  },\n  methods: {\n    initBigChart(index) {\n      let chartData = {\n        datasets: [\n          {\n            label: \"Performance\",\n            data: this.bigLineChart.allData[index],\n          },\n        ],\n        labels: [\"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      };\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    numberWithCommas(x) {\n      if (x === null || x === undefined) {\n        x = 0;\n      }\n      x = String(x);\n      return x.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    },\n    async getTotalIncome_day() {\n      var m = moment();\n      m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment(m).format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInDay?site=Rayong-1&sdate=${date}`\n        )\n        .then((response) => {\n          console.log(response);\n          this.day_total = 0;\n          if (response.data.length > 0) {\n            for (let transection of response.data) {\n              this.day_total += transection.insertedCredit;\n            }\n            console.log(\"this day: \", this.day_total);\n            var grouped = _.groupBy(response.data, function(item) {\n              return item.deviceId;\n            });\n            this.redBarChart.chartData.labels = [];\n            this.redBarChart.chartData.datasets = [];\n            for (let key in grouped) {\n              this.redBarChart.chartData.labels.push(key);\n              let tmp_counter = 0;\n              console.log(\"push key :\", key);\n              for (let items of grouped[key]) {\n                tmp_counter += items.insertedCredit;\n                // console.log(\"add money :\",tmp_counter);\n              }\n              this.redBarChart.chartData.datasets.push(tmp_counter);\n            }\n            console.log(\"GROUPED ITEMS :\", grouped);\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_last_7_days() {\n      // var m = moment();\n      // m = m.subtract(7, \"days\");\n      // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeLast7Days?site=Rayong-1&date=${date}`\n        )\n        .then((response) => {\n          console.log(\"7days income :\", response);\n          this.seven_day_total = 0;\n          this.monthChart.data = [];\n          this.bigLineChart.chartData.datasets = [];\n          if (response.data.length > 0) {\n            for (let incomes of response.data) {\n              this.seven_day_total += incomes.money;\n              let income_date = moment()\n                .date(incomes.day)\n                .format(\"YYYY-MM-DD\");\n              this.monthChart.labels.push(income_date);\n              this.monthChart.data.push(incomes.money);\n              // this.bigLineChart.chartData.labels.push(income_date);\n              // this.bigLineChart.chartData.datasets.push(incomes.money);\n            }\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_year() {\n      // var m = moment();\n      // m = m.subtract(7, \"days\");\n      // m.set({ hour: 0, minute: 0, second: 0, millisecond: 0 });\n      let date = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeThisYear?site=Rayong-1&date=${date}`\n        )\n        .then((response) => {\n          console.log(\"7days income :\", response);\n          this.year_total = 0;\n          // this.bigLineChart.chartData.labels = [];\n          // this.bigLineChart.chartData.datasets = [];\n          this.yearChart.labels = [];\n          this.yearChart.data = [];\n          if (response.data.length > 0) {\n            for (let incomes of response.data) {\n              this.year_total += incomes.money;\n              console.log(\"year total: \", this.year_total);\n              let income_date = moment(date)\n                .set(\"month\", incomes.month - 1)\n                .format(\"YYYY-MM\");\n              // this.bigLineChart.chartData.labels.push(income_date);\n              // this.bigLineChart.chartData.datasets.push(incomes.money);\n              this.yearChart.data.push(incomes.money);\n              this.yearChart.labels.push(income_date);\n            }\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    async getTotalIncome_month() {\n      const startOfMonth = moment()\n        .startOf(\"month\")\n        .format(\"YYYY-MM-DD HH:mm:ss\");\n      await axios\n        .get(\n          `${this.SERVER_URL}/getTotalIncomeInMonth?site=Rayong-1&sdate=${startOfMonth}`\n        )\n        .then((response) => {\n          console.log(response);\n          this.month_total = 0;\n          if (response.data.length > 0) {\n            this.month_total = response.data[0].money;\n            console.log(\"month_total : \", this.month_total);\n          }\n        })\n        .catch((e) => {\n          console.log(\"ERROR |\", e);\n        });\n    },\n    initDevicesChart() {\n      var ctx = document.getElementById(\"my-chart\");\n      var myChart = new Chart(ctx, {\n        type: \"bar\",\n        scales: {\n          yAxes: [\n            {\n              maxBarThickness: 2,\n            },\n          ],\n        },\n        dataPointWidth: 20,\n        data: {\n          labels: this.redBarChart.chartData.labels,\n          datasets: [\n            {\n              label: \"Income\",\n              data: this.redBarChart.chartData.datasets,\n              borderColor: \"#6E7EF5\",\n              backgroundColor: \"#E75F5B\",\n              fill: true,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n        },\n      });\n      myChart.update();\n    },\n    initTotalChart() {\n      document.getElementById(\"chartContainer\").innerHTML = \"&nbsp;\";\n      document.getElementById(\"chartContainer\").innerHTML = '<canvas style=\"height:100% !important; width:100% !important\" id=\"big-chart\"></canvas>';\n      var ctx = document.getElementById(\"big-chart\");\n      if (this.myChart !== null) {\n        this.myChart.destroy();\n      }\n      if (ctx !== null) {\n        var myChart = new Chart(ctx, {\n          type: \"line\",\n          data: {\n            labels: this.monthChart.labels,\n            datasets: [\n              {\n                label: \"Income\",\n                data: this.monthChart.data,\n                borderColor: \"#6E7EF5\",\n                backgroundColor: \"#6E7EF5\",\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n          },\n        });\n        this.myChart = myChart;\n      }\n    },\n    initTotalChart2() {\n      document.getElementById(\"chartContainer\").innerHTML = \"&nbsp;\";\n      document.getElementById(\"chartContainer\").innerHTML = '<canvas style=\"height:100% !important; width:100% !important\" id=\"big-chart\"></canvas>';\n      var ctx = document.getElementById(\"big-chart\");\n      if (this.myChart !== null) {\n        this.myChart.destroy();\n      }\n      if (ctx !== null) {\n        var myChart = new Chart(ctx, {\n          type: \"bar\",\n          data: {\n            labels: this.yearChart.labels,\n            datasets: [\n              {\n                label: \"Income\",\n                data: this.yearChart.data,\n                borderColor: \"#6E7EF5\",\n                backgroundColor: \"#6E7EF5\",\n                fill: false,\n              },\n            ],\n          },\n          options: {\n            responsive: true,\n          },\n        });\n        this.myChart = myChart;\n      }\n    },\n  },\n  mounted() {\n    this.initBigChart(0);\n  },\n  async created() {\n    let loader = this.$loading.show({\n      // Optional parameters\n      color: \"blue\",\n      canCancel: true,\n    });\n    await this.getTotalIncome_day();\n    await this.getTotalIncome_month();\n    await this.getTotalIncome_last_7_days();\n    await this.getTotalIncome_year();\n    this.initTotalChart();\n    this.initDevicesChart();\n    loader.hide();\n  },\n};\n</script>\n<style lang=\"scss\">\n.el-table .cell {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n.graphCard {\n  height: 600px !important;\n}\n.statusCard {\n  height: 8rem !important;\n}\n</style>\n"]}]}