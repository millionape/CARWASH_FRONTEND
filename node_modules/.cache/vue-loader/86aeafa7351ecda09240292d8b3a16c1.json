{"remainingRequest":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\NotificationPlugin\\Notification.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\NotificationPlugin\\Notification.vue","mtime":1607769978131},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'notification',\n  components: {\n    contentRender: {\n      props: ['component'],\n      render: function (createElement) {\n        return createElement(this.component)\n      }\n    }\n  },\n  props: {\n    message: String,\n    title: {\n      type: String,\n      description: 'Notification title'\n    },\n    icon: {\n      type: String,\n      description: 'Notification icon'\n    },\n    verticalAlign: {\n      type: String,\n      default: 'top',\n      validator: value => {\n        let acceptedValues = ['top', 'bottom'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Vertical alignment of notification (top|bottom)'\n    },\n    horizontalAlign: {\n      type: String,\n      default: 'right',\n      validator: value => {\n        let acceptedValues = ['left', 'center', 'right'];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Horizontal alignment of notification (left|center|right)'\n    },\n    type: {\n      type: String,\n      default: 'info',\n      validator: value => {\n        let acceptedValues = [\n          'default',\n          'info',\n          'primary',\n          'danger',\n          'warning',\n          'success'\n        ];\n        return acceptedValues.indexOf(value) !== -1;\n      },\n      description: 'Notification type of notification (default|info|primary|danger|warning|success)'\n    },\n    timeout: {\n      type: Number,\n      default: 5000,\n      validator: value => {\n        return value >= 0;\n      },\n      description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\n    },\n    timestamp: {\n      type: Date,\n      default: () => new Date(),\n      description: 'Notification timestamp (used internally to handle notification removal correctly)'\n    },\n    component: {\n      type: [Object, Function],\n      description: 'Custom content component. Cane be a `.vue` component or render function'\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to show close button'\n    },\n    closeOnClick: {\n      type: Boolean,\n      default: true,\n      description: 'Whether to close notification when clicking it\\' body'\n    },\n    clickHandler: {\n      type: Function,\n      description: 'Custom notification click handler'\n    }\n  },\n  data() {\n    return {\n      elmHeight: 0\n    };\n  },\n  computed: {\n    hasIcon() {\n      return this.icon && this.icon.length > 0;\n    },\n    alertType() {\n      return `alert-${this.type}`;\n    },\n    customPosition() {\n      let initialMargin = 20;\n      let alertHeight = this.elmHeight + 10;\n      let sameAlertsCount = this.$notifications.state.filter(alert => {\n        return (\n          alert.horizontalAlign === this.horizontalAlign &&\n          alert.verticalAlign === this.verticalAlign &&\n          alert.timestamp <= this.timestamp\n        );\n      }).length;\n      if (this.$notifications.settings.overlap) {\n        sameAlertsCount = 1;\n      }\n      let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\n      let styles = {};\n      if (this.verticalAlign === 'top') {\n        styles.top = `${pixels}px`;\n      } else {\n        styles.bottom = `${pixels}px`;\n      }\n      return styles;\n    }\n  },\n  methods: {\n    close() {\n      this.$emit('close', this.timestamp);\n    },\n    tryClose(evt) {\n      if (this.clickHandler) {\n        this.clickHandler(evt, this);\n      }\n      if (this.closeOnClick) {\n        this.close();\n      }\n    }\n  },\n  mounted() {\n    this.elmHeight = this.$el.clientHeight;\n    if (this.timeout) {\n      setTimeout(this.close, this.timeout);\n    }\n  }\n};\n",{"version":3,"sources":["Notification.vue"],"names":[],"mappingsfile":"Notification.vue","sourceRoot":"src/components/NotificationPlugin","sourcesContent":["<template>\r\n  <div\r\n    @click=\"tryClose\"\r\n    data-notify=\"container\"\r\n    class=\"alert alert-notify alert-dismissible\"\r\n    :class=\"[\r\n      { 'alert-with-icon': icon },\r\n      verticalAlign,\r\n      horizontalAlign,\r\n      alertType\r\n    ]\"\r\n    role=\"alert\"\r\n    :style=\"customPosition\"\r\n    data-notify-position=\"top-center\"\r\n  >\r\n    <template v-if=\"icon || $slots.icon\">\r\n      <slot name=\"icon\">\r\n            <span class=\"alert-icon\" data-notify=\"icon\">\r\n              <i :class=\"icon\"></i>\r\n            </span>\r\n      </slot>\r\n    </template>\r\n\r\n    <span class=\"alert-text\">\r\n\r\n      <span v-if=\"title\" class=\"title\">\r\n        <b>{{ title }}<br/></b>\r\n      </span>\r\n      <span v-if=\"message\" v-html=\"message\"></span>\r\n      <content-render\r\n        v-if=\"!message && component\"\r\n        :component=\"component\"\r\n      ></content-render>\r\n    </span>\r\n\r\n    <slot name=\"dismiss-icon\">\r\n      <button type=\"button\"\r\n              class=\"close\"\r\n              data-dismiss=\"alert\"\r\n              aria-label=\"Close\"\r\n              @click=\"close\">\r\n        <span aria-hidden=\"true\">Ã—</span>\r\n      </button>\r\n    </slot>\r\n  </div>\r\n</template>\r\n<script>\r\n  export default {\r\n    name: 'notification',\r\n    components: {\r\n      contentRender: {\r\n        props: ['component'],\r\n        render: function (createElement) {\r\n          return createElement(this.component)\r\n        }\r\n      }\r\n    },\r\n    props: {\r\n      message: String,\r\n      title: {\r\n        type: String,\r\n        description: 'Notification title'\r\n      },\r\n      icon: {\r\n        type: String,\r\n        description: 'Notification icon'\r\n      },\r\n      verticalAlign: {\r\n        type: String,\r\n        default: 'top',\r\n        validator: value => {\r\n          let acceptedValues = ['top', 'bottom'];\r\n          return acceptedValues.indexOf(value) !== -1;\r\n        },\r\n        description: 'Vertical alignment of notification (top|bottom)'\r\n      },\r\n      horizontalAlign: {\r\n        type: String,\r\n        default: 'right',\r\n        validator: value => {\r\n          let acceptedValues = ['left', 'center', 'right'];\r\n          return acceptedValues.indexOf(value) !== -1;\r\n        },\r\n        description: 'Horizontal alignment of notification (left|center|right)'\r\n      },\r\n      type: {\r\n        type: String,\r\n        default: 'info',\r\n        validator: value => {\r\n          let acceptedValues = [\r\n            'default',\r\n            'info',\r\n            'primary',\r\n            'danger',\r\n            'warning',\r\n            'success'\r\n          ];\r\n          return acceptedValues.indexOf(value) !== -1;\r\n        },\r\n        description: 'Notification type of notification (default|info|primary|danger|warning|success)'\r\n      },\r\n      timeout: {\r\n        type: Number,\r\n        default: 5000,\r\n        validator: value => {\r\n          return value >= 0;\r\n        },\r\n        description: 'Notification timeout (closes after X milliseconds). Default is 5000 (5s)'\r\n      },\r\n      timestamp: {\r\n        type: Date,\r\n        default: () => new Date(),\r\n        description: 'Notification timestamp (used internally to handle notification removal correctly)'\r\n      },\r\n      component: {\r\n        type: [Object, Function],\r\n        description: 'Custom content component. Cane be a `.vue` component or render function'\r\n      },\r\n      showClose: {\r\n        type: Boolean,\r\n        default: true,\r\n        description: 'Whether to show close button'\r\n      },\r\n      closeOnClick: {\r\n        type: Boolean,\r\n        default: true,\r\n        description: 'Whether to close notification when clicking it\\' body'\r\n      },\r\n      clickHandler: {\r\n        type: Function,\r\n        description: 'Custom notification click handler'\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        elmHeight: 0\r\n      };\r\n    },\r\n    computed: {\r\n      hasIcon() {\r\n        return this.icon && this.icon.length > 0;\r\n      },\r\n      alertType() {\r\n        return `alert-${this.type}`;\r\n      },\r\n      customPosition() {\r\n        let initialMargin = 20;\r\n        let alertHeight = this.elmHeight + 10;\r\n        let sameAlertsCount = this.$notifications.state.filter(alert => {\r\n          return (\r\n            alert.horizontalAlign === this.horizontalAlign &&\r\n            alert.verticalAlign === this.verticalAlign &&\r\n            alert.timestamp <= this.timestamp\r\n          );\r\n        }).length;\r\n        if (this.$notifications.settings.overlap) {\r\n          sameAlertsCount = 1;\r\n        }\r\n        let pixels = (sameAlertsCount - 1) * alertHeight + initialMargin;\r\n        let styles = {};\r\n        if (this.verticalAlign === 'top') {\r\n          styles.top = `${pixels}px`;\r\n        } else {\r\n          styles.bottom = `${pixels}px`;\r\n        }\r\n        return styles;\r\n      }\r\n    },\r\n    methods: {\r\n      close() {\r\n        this.$emit('close', this.timestamp);\r\n      },\r\n      tryClose(evt) {\r\n        if (this.clickHandler) {\r\n          this.clickHandler(evt, this);\r\n        }\r\n        if (this.closeOnClick) {\r\n          this.close();\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      this.elmHeight = this.$el.clientHeight;\r\n      if (this.timeout) {\r\n        setTimeout(this.close, this.timeout);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n<style lang=\"scss\">\r\n  .notifications .alert {\r\n    position: fixed;\r\n    z-index: 10000;\r\n\r\n    &[data-notify='container'] {\r\n      max-width: 500px;\r\n    }\r\n\r\n    &.center {\r\n      margin: 0 auto;\r\n    }\r\n    &.left {\r\n      left: 20px;\r\n    }\r\n    &.right {\r\n      right: 20px;\r\n    }\r\n  }\r\n</style>\r\n"]}]}