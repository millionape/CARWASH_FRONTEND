{"remainingRequest":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\Inputs\\BaseCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\Inputs\\BaseCheckbox.vue","mtime":1607769978125},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\"\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\"\n    },\n    inputClasses: {\n      type: [String, Object, Array],\n      description: \"Checkbox input classes\"\n    },\n    type: {\n      type: String,\n      description: 'Checkbox type (e.g info, danger etc)'\n    }\n  },\n  data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get() {\n        return this.checked;\n      },\n      set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n        this.$emit(\"input\", check);\n      }\n    },\n    inlineClass() {\n      if (this.inline) {\n        return `form-check-inline`;\n      }\n    }\n  },\n  created() {\n    this.cbId = Math.random()\n      .toString(16)\n      .slice(2);\n  }\n};\n",{"version":3,"sources":["BaseCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseCheckbox.vue","sourceRoot":"src/components/Inputs","sourcesContent":["<template>\r\n  <div class=\"custom-control custom-checkbox\"\r\n       :class=\"[\r\n       {disabled: disabled},\r\n       {[`custom-checkbox-${type}`]: type},inlineClass]\">\r\n    <input :id=\"cbId\"\r\n           class=\"custom-control-input\"\r\n           :class=\"inputClasses\"\r\n           type=\"checkbox\"\r\n           :disabled=\"disabled\"\r\n           v-model=\"model\"/>\r\n    <label :for=\"cbId\" class=\"custom-control-label\">\r\n      <slot>\r\n        <span v-if=\"inline\">&nbsp;</span>\r\n      </slot>\r\n    </label>\r\n  </div>\r\n</template>\r\n<script>\r\n  export default {\r\n    name: \"base-checkbox\",\r\n    model: {\r\n      prop: \"checked\"\r\n    },\r\n    props: {\r\n      checked: {\r\n        type: [Array, Boolean],\r\n        description: \"Whether checkbox is checked\"\r\n      },\r\n      disabled: {\r\n        type: Boolean,\r\n        description: \"Whether checkbox is disabled\"\r\n      },\r\n      inline: {\r\n        type: Boolean,\r\n        description: \"Whether checkbox is inline\"\r\n      },\r\n      inputClasses: {\r\n        type: [String, Object, Array],\r\n        description: \"Checkbox input classes\"\r\n      },\r\n      type: {\r\n        type: String,\r\n        description: 'Checkbox type (e.g info, danger etc)'\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        cbId: \"\",\r\n        touched: false\r\n      };\r\n    },\r\n    computed: {\r\n      model: {\r\n        get() {\r\n          return this.checked;\r\n        },\r\n        set(check) {\r\n          if (!this.touched) {\r\n            this.touched = true;\r\n          }\r\n          this.$emit(\"input\", check);\r\n        }\r\n      },\r\n      inlineClass() {\r\n        if (this.inline) {\r\n          return `form-check-inline`;\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      this.cbId = Math.random()\r\n        .toString(16)\r\n        .slice(2);\r\n    }\r\n  };\r\n</script>\r\n"]}]}