{"remainingRequest":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\views\\DeviceInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\views\\DeviceInfo.vue","mtime":1607773770273},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { SERVER_PARAMS } from \"../environment/environment\";\r\n\r\nexport default {\r\n  name: \"icons\",\r\n  props: {\r\n    deviceId: String,\r\n  },\r\n  data() {\r\n    return {\r\n      deviceMode: null,\r\n      deviceCurrentCredit: null,\r\n      deviceLastInsertCredit: null,\r\n      deviceLastInsertDate: null,\r\n      deviceUpdatedDate: null,\r\n      deviceList: [],\r\n      polling: null,\r\n      SERVER_URL: SERVER_PARAMS.URL,\r\n      columns: [\r\n        {\r\n          label: \"Updated Date\",\r\n          field: \"updatedDate\",\r\n        },\r\n        {\r\n          label: \"Device Id\",\r\n          field: \"deviceId\",\r\n        },\r\n        {\r\n          label: \"Mode\",\r\n          field: \"onMode\",\r\n        },\r\n        {\r\n          label: \"Credit\",\r\n          field: \"currentCredit\",\r\n        },\r\n        {\r\n          label: \"Inserted Credit\",\r\n          field: \"insertedCredit\",\r\n        },\r\n      ],\r\n      rows: [],\r\n    };\r\n  },\r\n  methods: {\r\n  getModeText(mode){\r\n    //console.log(\"MODE---> \",mode)\r\n    if(mode === null){\r\n      return \"\";\r\n    }\r\n    mode = Number(mode);\r\n    switch(mode){\r\n      case 3:\r\n        return \"High Pressure Water\";\r\n      case 4:\r\n        return \"Vacuum Cleaner\";\r\n      case 5:\r\n        return \"Shampoo\";\r\n      case 6:\r\n        return \"Blower\";\r\n      case 7:\r\n        return \"Water\";\r\n      default:\r\n        return \"No mode selected\"\r\n    }\r\n  },\r\n    pollData() {\r\n      this.polling = setInterval(() => {\r\n        this.getCurrentStates();\r\n      }, 2000);\r\n    },\r\n    async getCurrentStates() {\r\n      await axios\r\n        .get(`${this.SERVER_URL}/getDeviceCurrentStatus?deviceId=${this.deviceId}`)\r\n        .then((response) => {\r\n          console.log(\"DEVICES info \", response);\r\n          let data = response.data[0];\r\n          this.deviceMode = this.getModeText(data.onMode);\r\n          console.log(\"MODE: \",this.deviceMode);\r\n          this.deviceCurrentCredit = data.currentCredit;\r\n          this.deviceLastInsertCredit = data.lastInsertCredit;\r\n          this.deviceLastInsertDate = data.lastInsertDate;\r\n          this.deviceUpdatedDate = data.updatedDate;\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"ERROR |\", e);\r\n        });\r\n    },\r\n    async getHistory(deviceId) {\r\n      let loader = this.$loading.show({\r\n        // Optional parameters\r\n        color: \"blue\",\r\n        canCancel: true,\r\n      });\r\n      var sdate = moment()\r\n        .subtract(7, \"days\")\r\n        .format(\"YYYY-MM-DD HH:mm:ss\");\r\n      var edate = moment().format(\"YYYY-MM-DD HH:mm:ss\");\r\n      await axios\r\n        .get(\r\n          `${this.SERVER_URL}/getTransectionByDeviceId?deviceId=${deviceId}&sdate=${sdate}&edate=${edate}&limit=2000`\r\n        )\r\n        .then((response) => {\r\n          console.log(\"HISTORY lIST \", response);\r\n          let history = response.data.map(x => {\r\n            return {\r\n              currentCredit: x.currentCredit,\r\n              deviceId: x.deviceId,\r\n              insertedCredit: x.insertedCredit,\r\n              onMode: this.getModeText(x.onMode),\r\n              updatedDate: x.updatedDate\r\n            }\r\n          })\r\n          this.rows = history;\r\n          loader.hide();\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"ERROR |\", e);\r\n          loader.hide();\r\n        });\r\n    },\r\n  },\r\n   beforeDestroy() {\r\n    clearInterval(this.polling);\r\n  },\r\n  \r\n  created() {\r\n    this.getHistory(this.deviceId);\r\n    this.pollData();\r\n  },\r\n};\r\n",{"version":3,"sources":["DeviceInfo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"DeviceInfo.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"mt-3\">\r\n    <card header-classes=\"bg-transparent mt-3\">\r\n      <h3 class=\"mb-0\">Current state : [{{deviceId}}]</h3>\r\n      <b-row class=\"mt-3\">\r\n        <b-col xl=\"2\" class=\"mt-1\">\r\n          <stats-card\r\n            class=\"h-100\"\r\n            title=\"Current Credit\"\r\n            type=\"gradient-info\"\r\n            :sub-title=\"String(deviceCurrentCredit)\"\r\n          >\r\n          </stats-card>\r\n        </b-col>\r\n        <b-col xl=\"2\" class=\"mt-1\">\r\n          <stats-card\r\n            class=\"h-100\"\r\n            title=\"Current Mode\"\r\n            type=\"gradient-info\"\r\n            :sub-title=\"String(deviceMode)\"\r\n          >\r\n          </stats-card>\r\n        </b-col >\r\n        <b-col  xl=\"2\" class=\"mt-1\">\r\n          <stats-card\r\n            class=\"h-100\"\r\n            title=\"Last Inserted Credit\"\r\n            type=\"gradient-info\"\r\n            :sub-title=\"String(deviceLastInsertCredit)\"\r\n          >\r\n          </stats-card>\r\n        </b-col>\r\n        <b-col cols=\"12\" xl=\"3\" class=\"mt-1\">\r\n          <stats-card\r\n            class=\"h-100\"\r\n            title=\"Last Inserted Date\"\r\n            type=\"gradient-info\"\r\n            :sub-title=\"deviceLastInsertDate\"\r\n          >\r\n          </stats-card>\r\n        </b-col>\r\n        <b-col cols=\"12\" xl=\"3\" class=\"mt-1\">\r\n          <stats-card\r\n            class=\"h-100\"\r\n            title=\"Last Update\"\r\n            type=\"gradient-info\"\r\n            :sub-title=\"deviceUpdatedDate\"\r\n          >\r\n          </stats-card>\r\n        </b-col>\r\n      </b-row>\r\n    </card>\r\n    <br />\r\n    <card header-classes=\"bg-transparent\">\r\n      <h3 slot=\"header\" class=\"mb-0\">Event List</h3>\r\n      <vue-good-table\r\n        :columns=\"columns\"\r\n        :rows=\"rows\"\r\n        :pagination-options=\"{\r\n          enabled: true,\r\n          mode: 'pages',\r\n          perPage: 10,\r\n          perPageDropdown: [50, 100, 300, 1000],\r\n        }\"\r\n      />\r\n    </card>\r\n  </div>\r\n</template>\r\n<script>\r\nimport Vue from \"vue\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { SERVER_PARAMS } from \"../environment/environment\";\r\n\r\nexport default {\r\n  name: \"icons\",\r\n  props: {\r\n    deviceId: String,\r\n  },\r\n  data() {\r\n    return {\r\n      deviceMode: null,\r\n      deviceCurrentCredit: null,\r\n      deviceLastInsertCredit: null,\r\n      deviceLastInsertDate: null,\r\n      deviceUpdatedDate: null,\r\n      deviceList: [],\r\n      polling: null,\r\n      SERVER_URL: SERVER_PARAMS.URL,\r\n      columns: [\r\n        {\r\n          label: \"Updated Date\",\r\n          field: \"updatedDate\",\r\n        },\r\n        {\r\n          label: \"Device Id\",\r\n          field: \"deviceId\",\r\n        },\r\n        {\r\n          label: \"Mode\",\r\n          field: \"onMode\",\r\n        },\r\n        {\r\n          label: \"Credit\",\r\n          field: \"currentCredit\",\r\n        },\r\n        {\r\n          label: \"Inserted Credit\",\r\n          field: \"insertedCredit\",\r\n        },\r\n      ],\r\n      rows: [],\r\n    };\r\n  },\r\n  methods: {\r\n  getModeText(mode){\r\n    //console.log(\"MODE---> \",mode)\r\n    if(mode === null){\r\n      return \"\";\r\n    }\r\n    mode = Number(mode);\r\n    switch(mode){\r\n      case 3:\r\n        return \"High Pressure Water\";\r\n      case 4:\r\n        return \"Vacuum Cleaner\";\r\n      case 5:\r\n        return \"Shampoo\";\r\n      case 6:\r\n        return \"Blower\";\r\n      case 7:\r\n        return \"Water\";\r\n      default:\r\n        return \"No mode selected\"\r\n    }\r\n  },\r\n    pollData() {\r\n      this.polling = setInterval(() => {\r\n        this.getCurrentStates();\r\n      }, 2000);\r\n    },\r\n    async getCurrentStates() {\r\n      await axios\r\n        .get(`${this.SERVER_URL}/getDeviceCurrentStatus?deviceId=${this.deviceId}`)\r\n        .then((response) => {\r\n          console.log(\"DEVICES info \", response);\r\n          let data = response.data[0];\r\n          this.deviceMode = this.getModeText(data.onMode);\r\n          console.log(\"MODE: \",this.deviceMode);\r\n          this.deviceCurrentCredit = data.currentCredit;\r\n          this.deviceLastInsertCredit = data.lastInsertCredit;\r\n          this.deviceLastInsertDate = data.lastInsertDate;\r\n          this.deviceUpdatedDate = data.updatedDate;\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"ERROR |\", e);\r\n        });\r\n    },\r\n    async getHistory(deviceId) {\r\n      let loader = this.$loading.show({\r\n        // Optional parameters\r\n        color: \"blue\",\r\n        canCancel: true,\r\n      });\r\n      var sdate = moment()\r\n        .subtract(7, \"days\")\r\n        .format(\"YYYY-MM-DD HH:mm:ss\");\r\n      var edate = moment().format(\"YYYY-MM-DD HH:mm:ss\");\r\n      await axios\r\n        .get(\r\n          `${this.SERVER_URL}/getTransectionByDeviceId?deviceId=${deviceId}&sdate=${sdate}&edate=${edate}&limit=2000`\r\n        )\r\n        .then((response) => {\r\n          console.log(\"HISTORY lIST \", response);\r\n          let history = response.data.map(x => {\r\n            return {\r\n              currentCredit: x.currentCredit,\r\n              deviceId: x.deviceId,\r\n              insertedCredit: x.insertedCredit,\r\n              onMode: this.getModeText(x.onMode),\r\n              updatedDate: x.updatedDate\r\n            }\r\n          })\r\n          this.rows = history;\r\n          loader.hide();\r\n        })\r\n        .catch((e) => {\r\n          console.log(\"ERROR |\", e);\r\n          loader.hide();\r\n        });\r\n    },\r\n  },\r\n   beforeDestroy() {\r\n    clearInterval(this.polling);\r\n  },\r\n  \r\n  created() {\r\n    this.getHistory(this.deviceId);\r\n    this.pollData();\r\n  },\r\n};\r\n</script>\r\n<style></style>\r\n"]}]}