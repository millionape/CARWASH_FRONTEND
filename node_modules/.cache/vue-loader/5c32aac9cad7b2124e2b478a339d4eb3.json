{"remainingRequest":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\Inputs\\BaseInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\src\\components\\Inputs\\BaseInput.vue","mtime":1607769978127},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Reah\\Desktop\\CARWASH_FRONTEND\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  inheritAttrs: false,\n  name: \"base-input\",\n  props: {\n    required: {\n      type: Boolean,\n      description: \"Whether input is required (adds an asterix *)\"\n    },\n    group: {\n      type: Boolean,\n      description: \"Whether input is an input group (manual override in special cases)\"\n    },\n    alternative: {\n      type: Boolean,\n      description: \"Whether input is of alternative layout\"\n    },\n    label: {\n      type: String,\n      description: \"Input label (text before input)\"\n    },\n    error: {\n      type: String,\n      description: \"Input error (below input)\"\n    },\n    successMessage: {\n      type: String,\n      description: \"Input success message\",\n      default: ''\n    },\n    labelClasses: {\n      type: String,\n      description: \"Input label css classes\",\n      default: \"form-control-label\"\n    },\n    inputClasses: {\n      type: String,\n      description: \"Input css classes\"\n    },\n    inputGroupClasses: {\n      type: String,\n      description: \"Input group css classes\"\n    },\n    value: {\n      type: [String, Number],\n      description: \"Input value\"\n    },\n    type: {\n      type: String,\n      description: \"Input type\",\n      default: \"text\"\n    },\n    appendIcon: {\n      type: String,\n      description: \"Append icon (right)\"\n    },\n    prependIcon: {\n      type: String,\n      description: \"Prepend icon (left)\"\n    },\n    rules: {\n      type: [String, Array, Object],\n      description: 'Vee validate validation rules',\n      default: ''\n    },\n    name: {\n      type: String,\n      description: 'Input name (used for validation)',\n      default: ''\n    }\n  },\n  data() {\n    return {\n      focused: false\n    };\n  },\n  computed: {\n    listeners() {\n      return {\n        ...this.$listeners,\n        input: this.updateValue,\n        focus: this.onFocus,\n        blur: this.onBlur\n      };\n    },\n    slotData() {\n      return {\n        focused: this.focused,\n        error: this.error,\n        ...this.listeners\n      };\n    },\n    hasIcon() {\n      const { append, prepend } = this.$slots;\n      return (\n        append !== undefined ||\n        prepend !== undefined ||\n        this.appendIcon !== undefined ||\n        this.prependIcon !== undefined ||\n        this.group\n      );\n    }\n  },\n  methods: {\n    updateValue(evt) {\n      let value = evt.target.value;\n      this.$emit(\"input\", value);\n    },\n    onFocus(evt) {\n      this.focused = true;\n      this.$emit(\"focus\", evt);\n    },\n    onBlur(evt) {\n      this.focused = false;\n      this.$emit(\"blur\", evt);\n    }\n  }\n};\n",{"version":3,"sources":["BaseInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"BaseInput.vue","sourceRoot":"src/components/Inputs","sourcesContent":["<template>\r\n  <validation-provider :rules=\"rules\" :name=\"name\" v-bind=\"$attrs\" v-slot=\"{errors, valid, invalid, validated}\">\r\n    <b-form-group>\r\n      <slot name=\"label\">\r\n        <label v-if=\"label\" :class=\"labelClasses\">\r\n          {{label}}\r\n        </label>\r\n      </slot>\r\n      <div :class=\"[\r\n       {'input-group': hasIcon},\r\n       {'focused': focused},\r\n       {'input-group-alternative': alternative},\r\n       {'has-label': label || $slots.label},\r\n       inputGroupClasses\r\n       ]\">\r\n        <div v-if=\"prependIcon || $slots.prepend\" class=\"input-group-prepend\">\r\n        <span class=\"input-group-text\">\r\n          <slot name=\"prepend\">\r\n            <i :class=\"prependIcon\"></i>\r\n          </slot>\r\n        </span>\r\n        </div>\r\n        <slot v-bind=\"slotData\">\r\n          <input\r\n            :value=\"value\"\r\n            :type=\"type\"\r\n            v-on=\"listeners\"\r\n            v-bind=\"$attrs\"\r\n            :valid=\"valid\"\r\n            :required=\"required\"\r\n            class=\"form-control\"\r\n            :class=\"[{'is-valid': valid && validated && successMessage}, {'is-invalid': invalid && validated}, inputClasses]\">\r\n        </slot>\r\n        <div v-if=\"appendIcon || $slots.append\" class=\"input-group-append\">\r\n          <span class=\"input-group-text\">\r\n              <slot name=\"append\">\r\n                  <i :class=\"appendIcon\"></i>\r\n              </slot>\r\n          </span>\r\n        </div>\r\n        <slot name=\"infoBlock\"></slot>\r\n      </div>\r\n      <slot name=\"success\">\r\n        <div class=\"valid-feedback\" v-if=\"valid && validated && successMessage\">\r\n          {{successMessage}}\r\n        </div>\r\n      </slot>\r\n      <slot name=\"error\">\r\n        <div v-if=\"errors[0]\" class=\"invalid-feedback\" style=\"display: block;\">\r\n          {{ errors[0] }}\r\n        </div>\r\n      </slot>\r\n    </b-form-group>\r\n  </validation-provider>\r\n</template>\r\n<script>\r\n  export default {\r\n    inheritAttrs: false,\r\n    name: \"base-input\",\r\n    props: {\r\n      required: {\r\n        type: Boolean,\r\n        description: \"Whether input is required (adds an asterix *)\"\r\n      },\r\n      group: {\r\n        type: Boolean,\r\n        description: \"Whether input is an input group (manual override in special cases)\"\r\n      },\r\n      alternative: {\r\n        type: Boolean,\r\n        description: \"Whether input is of alternative layout\"\r\n      },\r\n      label: {\r\n        type: String,\r\n        description: \"Input label (text before input)\"\r\n      },\r\n      error: {\r\n        type: String,\r\n        description: \"Input error (below input)\"\r\n      },\r\n      successMessage: {\r\n        type: String,\r\n        description: \"Input success message\",\r\n        default: ''\r\n      },\r\n      labelClasses: {\r\n        type: String,\r\n        description: \"Input label css classes\",\r\n        default: \"form-control-label\"\r\n      },\r\n      inputClasses: {\r\n        type: String,\r\n        description: \"Input css classes\"\r\n      },\r\n      inputGroupClasses: {\r\n        type: String,\r\n        description: \"Input group css classes\"\r\n      },\r\n      value: {\r\n        type: [String, Number],\r\n        description: \"Input value\"\r\n      },\r\n      type: {\r\n        type: String,\r\n        description: \"Input type\",\r\n        default: \"text\"\r\n      },\r\n      appendIcon: {\r\n        type: String,\r\n        description: \"Append icon (right)\"\r\n      },\r\n      prependIcon: {\r\n        type: String,\r\n        description: \"Prepend icon (left)\"\r\n      },\r\n      rules: {\r\n        type: [String, Array, Object],\r\n        description: 'Vee validate validation rules',\r\n        default: ''\r\n      },\r\n      name: {\r\n        type: String,\r\n        description: 'Input name (used for validation)',\r\n        default: ''\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        focused: false\r\n      };\r\n    },\r\n    computed: {\r\n      listeners() {\r\n        return {\r\n          ...this.$listeners,\r\n          input: this.updateValue,\r\n          focus: this.onFocus,\r\n          blur: this.onBlur\r\n        };\r\n      },\r\n      slotData() {\r\n        return {\r\n          focused: this.focused,\r\n          error: this.error,\r\n          ...this.listeners\r\n        };\r\n      },\r\n      hasIcon() {\r\n        const { append, prepend } = this.$slots;\r\n        return (\r\n          append !== undefined ||\r\n          prepend !== undefined ||\r\n          this.appendIcon !== undefined ||\r\n          this.prependIcon !== undefined ||\r\n          this.group\r\n        );\r\n      }\r\n    },\r\n    methods: {\r\n      updateValue(evt) {\r\n        let value = evt.target.value;\r\n        this.$emit(\"input\", value);\r\n      },\r\n      onFocus(evt) {\r\n        this.focused = true;\r\n        this.$emit(\"focus\", evt);\r\n      },\r\n      onBlur(evt) {\r\n        this.focused = false;\r\n        this.$emit(\"blur\", evt);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n<style>\r\n</style>\r\n"]}]}